/// <reference types="node-appwrite" />
import type { ExperienceDocumentCreate, ExperienceGraphqlDocument, ExperienceLikeGraphqlDocument, MonumentDocumentCreate, MonumentGraphqlDocument, MonumentLikeGraphqlDocument, NumberTypeAnswerGraphqlDocument, PlaceDetailGraphqlDocument, QuestionDocumentCreate, QuestionGraphqlDocument, RadioTypeAnswerGraphqlDocument, TextTypeAnswerGraphqlDocument, TokenGraphqlDocument, UserInfoDocumentCreate, UserInfoGraphqlDocument, UsersAnswerGraphqlDocument } from '@app/ts-types';
import { Types } from '@app/appwrite-ssr-graphql';
export type Collections = ReturnType<typeof collectionsAdmin>;
export type CollectionName = keyof ReturnType<typeof collectionsAdmin>;
type AppwriteSSRReturnTypeClient = ReturnType<Types.AppwriteSSR['none']>;
type AppwriteSSRReturnTypeAdmin = ReturnType<Types.AppwriteSSR['setAdmin']>;
export declare const collectionsClient: (Collection: AppwriteSSRReturnTypeClient['Collection']) => {
    userInfo: {
        atg: (...documents: import("appwrite").Models.Document[]) => UserInfoGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: UserInfoGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: UserInfoDocumentCreate, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<UserInfoGraphqlDocument>;
        createDocument(data: UserInfoDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<UserInfoGraphqlDocument>;
        updateDocument<TData extends UserInfoGraphqlDocument>(documentId: string, data: {} | Partial<UserInfoDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updateDocument<TData_1 extends UserInfoGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<UserInfoDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updatePermissions<TData_2 extends UserInfoGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updatePermissions<TData_3 extends UserInfoGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: UserInfoGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<UserInfoGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<UserInfoGraphqlDocument | null>;
        listDocuments<TData_4 extends UserInfoGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: UserInfoGraphqlDocument[];
        }>;
    };
    experience: {
        atg: (...documents: import("appwrite").Models.Document[]) => ExperienceGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: ExperienceGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: ExperienceDocumentCreate, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<ExperienceGraphqlDocument>;
        createDocument(data: ExperienceDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<ExperienceGraphqlDocument>;
        updateDocument<TData_5 extends ExperienceGraphqlDocument>(documentId: string, data: {} | Partial<ExperienceDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updateDocument<TData_1_1 extends ExperienceGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<ExperienceDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updatePermissions<TData_2_1 extends ExperienceGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updatePermissions<TData_3_1 extends ExperienceGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: ExperienceGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<ExperienceGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<ExperienceGraphqlDocument | null>;
        listDocuments<TData_4_1 extends ExperienceGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: ExperienceGraphqlDocument[];
        }>;
    };
    monument: {
        atg: (...documents: import("appwrite").Models.Document[]) => MonumentGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: MonumentGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: MonumentDocumentCreate, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<MonumentGraphqlDocument>;
        createDocument(data: MonumentDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<MonumentGraphqlDocument>;
        updateDocument<TData_6 extends MonumentGraphqlDocument>(documentId: string, data: {} | Partial<MonumentDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updateDocument<TData_1_2 extends MonumentGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<MonumentDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updatePermissions<TData_2_2 extends MonumentGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updatePermissions<TData_3_2 extends MonumentGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: MonumentGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<MonumentGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<MonumentGraphqlDocument | null>;
        listDocuments<TData_4_2 extends MonumentGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: MonumentGraphqlDocument[];
        }>;
    };
    token: {
        atg: (...documents: import("appwrite").Models.Document[]) => TokenGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: TokenGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").Token, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<TokenGraphqlDocument>;
        createDocument(data: import("@app/ts-types").Token, permissions?: string[] | undefined, id?: string | undefined): Promise<TokenGraphqlDocument>;
        updateDocument<TData_7 extends TokenGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").Token> | undefined, permissions?: string[] | undefined): Promise<TokenGraphqlDocument>;
        updateDocument<TData_1_3 extends TokenGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").Token> | undefined, permissions?: string[] | undefined): Promise<TokenGraphqlDocument>;
        updatePermissions<TData_2_3 extends TokenGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        updatePermissions<TData_3_3 extends TokenGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: TokenGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<TokenGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<TokenGraphqlDocument | null>;
        listDocuments<TData_4_3 extends TokenGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: TokenGraphqlDocument[];
        }>;
    };
    placeDetail: {
        atg: (...documents: import("appwrite").Models.Document[]) => PlaceDetailGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: PlaceDetailGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").PlaceDetail, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<PlaceDetailGraphqlDocument>;
        createDocument(data: import("@app/ts-types").PlaceDetail, permissions?: string[] | undefined, id?: string | undefined): Promise<PlaceDetailGraphqlDocument>;
        updateDocument<TData_8 extends PlaceDetailGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").PlaceDetail> | undefined, permissions?: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updateDocument<TData_1_4 extends PlaceDetailGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").PlaceDetail> | undefined, permissions?: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updatePermissions<TData_2_4 extends PlaceDetailGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updatePermissions<TData_3_4 extends PlaceDetailGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: PlaceDetailGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<PlaceDetailGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<PlaceDetailGraphqlDocument | null>;
        listDocuments<TData_4_4 extends PlaceDetailGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: PlaceDetailGraphqlDocument[];
        }>;
    };
    monumentLike: {
        atg: (...documents: import("appwrite").Models.Document[]) => MonumentLikeGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: MonumentLikeGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").MonumentLike, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<MonumentLikeGraphqlDocument>;
        createDocument(data: import("@app/ts-types").MonumentLike, permissions?: string[] | undefined, id?: string | undefined): Promise<MonumentLikeGraphqlDocument>;
        updateDocument<TData_9 extends MonumentLikeGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").MonumentLike> | undefined, permissions?: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updateDocument<TData_1_5 extends MonumentLikeGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").MonumentLike> | undefined, permissions?: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updatePermissions<TData_2_5 extends MonumentLikeGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updatePermissions<TData_3_5 extends MonumentLikeGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: MonumentLikeGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<MonumentLikeGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<MonumentLikeGraphqlDocument | null>;
        listDocuments<TData_4_5 extends MonumentLikeGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: MonumentLikeGraphqlDocument[];
        }>;
    };
    experienceLike: {
        atg: (...documents: import("appwrite").Models.Document[]) => ExperienceLikeGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: ExperienceLikeGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").ExperienceLike, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<ExperienceLikeGraphqlDocument>;
        createDocument(data: import("@app/ts-types").ExperienceLike, permissions?: string[] | undefined, id?: string | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updateDocument<TData_10 extends ExperienceLikeGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").ExperienceLike> | undefined, permissions?: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updateDocument<TData_1_6 extends ExperienceLikeGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").ExperienceLike> | undefined, permissions?: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updatePermissions<TData_2_6 extends ExperienceLikeGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updatePermissions<TData_3_6 extends ExperienceLikeGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: ExperienceLikeGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<ExperienceLikeGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<ExperienceLikeGraphqlDocument | null>;
        listDocuments<TData_4_6 extends ExperienceLikeGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: ExperienceLikeGraphqlDocument[];
        }>;
    };
    answerTypeText: {
        atg: (...documents: import("appwrite").Models.Document[]) => TextTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: TextTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").TextTypeAnswer, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").TextTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updateDocument<TData_11 extends TextTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").TextTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updateDocument<TData_1_7 extends TextTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").TextTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updatePermissions<TData_2_7 extends TextTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updatePermissions<TData_3_7 extends TextTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: TextTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<TextTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<TextTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_4_7 extends TextTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: TextTypeAnswerGraphqlDocument[];
        }>;
    };
    answerTypeNumber: {
        atg: (...documents: import("appwrite").Models.Document[]) => NumberTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: NumberTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").NumberTypeAnswer, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").NumberTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updateDocument<TData_12 extends NumberTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").NumberTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updateDocument<TData_1_8 extends NumberTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").NumberTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updatePermissions<TData_2_8 extends NumberTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updatePermissions<TData_3_8 extends NumberTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: NumberTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<NumberTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<NumberTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_4_8 extends NumberTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: NumberTypeAnswerGraphqlDocument[];
        }>;
    };
    answerTypeRadio: {
        atg: (...documents: import("appwrite").Models.Document[]) => RadioTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: RadioTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").RadioTypeAnswer, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").RadioTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updateDocument<TData_13 extends RadioTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").RadioTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updateDocument<TData_1_9 extends RadioTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").RadioTypeAnswer> | undefined, permissions?: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updatePermissions<TData_2_9 extends RadioTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updatePermissions<TData_3_9 extends RadioTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: RadioTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<RadioTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<RadioTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_4_9 extends RadioTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: RadioTypeAnswerGraphqlDocument[];
        }>;
    };
    question: {
        atg: (...documents: import("appwrite").Models.Document[]) => QuestionGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: QuestionGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: QuestionDocumentCreate, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<QuestionGraphqlDocument>;
        createDocument(data: QuestionDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<QuestionGraphqlDocument>;
        updateDocument<TData_14 extends QuestionGraphqlDocument>(documentId: string, data: {} | Partial<QuestionDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updateDocument<TData_1_10 extends QuestionGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<QuestionDocumentCreate> | undefined, permissions?: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updatePermissions<TData_2_10 extends QuestionGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updatePermissions<TData_3_10 extends QuestionGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: QuestionGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<QuestionGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<QuestionGraphqlDocument | null>;
        listDocuments<TData_4_10 extends QuestionGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: QuestionGraphqlDocument[];
        }>;
    };
    usersAnswer: {
        atg: (...documents: import("appwrite").Models.Document[]) => UsersAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: UsersAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").UsersAnswer, permissions?: import("appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<UsersAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").UsersAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<UsersAnswerGraphqlDocument>;
        updateDocument<TData_15 extends UsersAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").UsersAnswer> | undefined, permissions?: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updateDocument<TData_1_11 extends UsersAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").UsersAnswer> | undefined, permissions?: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updatePermissions<TData_2_11 extends UsersAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updatePermissions<TData_3_11 extends UsersAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: UsersAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        deleteAllDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<UsersAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<UsersAnswerGraphqlDocument | null>;
        listDocuments<TData_4_11 extends UsersAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: UsersAnswerGraphqlDocument[];
        }>;
    };
};
export declare const collectionsAdmin: (Collection: AppwriteSSRReturnTypeAdmin['Collection']) => {
    userInfo: {
        atg: (...documents: import("appwrite").Models.Document[]) => UserInfoGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: UserInfoGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: UserInfoDocumentCreate, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<UserInfoGraphqlDocument>;
        createDocument(data: UserInfoDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<UserInfoGraphqlDocument>;
        updateDocument<TData_5 extends UserInfoGraphqlDocument>(documentId: string, data: {} | Partial<UserInfoDocumentCreate> | undefined, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updateDocument<TData_6 extends UserInfoGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<UserInfoDocumentCreate> | undefined, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updatePermissions<TData_7 extends UserInfoGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        updatePermissions<TData_8 extends UserInfoGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<UserInfoGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: UserInfoGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<UserInfoGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<UserInfoGraphqlDocument | null>;
        listDocuments<TData_9 extends UserInfoGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: UserInfoGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    experience: {
        atg: (...documents: import("appwrite").Models.Document[]) => ExperienceGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: ExperienceGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: ExperienceDocumentCreate, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<ExperienceGraphqlDocument>;
        createDocument(data: ExperienceDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<ExperienceGraphqlDocument>;
        updateDocument<TData_5_1 extends ExperienceGraphqlDocument>(documentId: string, data: {} | Partial<ExperienceDocumentCreate> | undefined, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updateDocument<TData_6_1 extends ExperienceGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<ExperienceDocumentCreate> | undefined, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updatePermissions<TData_7_1 extends ExperienceGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        updatePermissions<TData_8_1 extends ExperienceGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<ExperienceGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: ExperienceGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<ExperienceGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<ExperienceGraphqlDocument | null>;
        listDocuments<TData_9_1 extends ExperienceGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: ExperienceGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: ("userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    monument: {
        atg: (...documents: import("appwrite").Models.Document[]) => MonumentGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: MonumentGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: MonumentDocumentCreate, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<MonumentGraphqlDocument>;
        createDocument(data: MonumentDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<MonumentGraphqlDocument>;
        updateDocument<TData_5_2 extends MonumentGraphqlDocument>(documentId: string, data: {} | Partial<MonumentDocumentCreate> | undefined, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updateDocument<TData_6_2 extends MonumentGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<MonumentDocumentCreate> | undefined, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updatePermissions<TData_7_2 extends MonumentGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        updatePermissions<TData_8_2 extends MonumentGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<MonumentGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: MonumentGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<MonumentGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<MonumentGraphqlDocument | null>;
        listDocuments<TData_9_2 extends MonumentGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: MonumentGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: ("userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    token: {
        atg: (...documents: import("appwrite").Models.Document[]) => TokenGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: TokenGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").Token, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<TokenGraphqlDocument>;
        createDocument(data: import("@app/ts-types").Token, permissions?: string[] | undefined, id?: string | undefined): Promise<TokenGraphqlDocument>;
        updateDocument<TData_5_3 extends TokenGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").Token> | undefined, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        updateDocument<TData_6_3 extends TokenGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").Token> | undefined, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        updatePermissions<TData_7_3 extends TokenGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        updatePermissions<TData_8_3 extends TokenGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<TokenGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: TokenGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<TokenGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<TokenGraphqlDocument | null>;
        listDocuments<TData_9_3 extends TokenGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: TokenGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").Token | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    placeDetail: {
        atg: (...documents: import("appwrite").Models.Document[]) => PlaceDetailGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: PlaceDetailGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").PlaceDetail, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<PlaceDetailGraphqlDocument>;
        createDocument(data: import("@app/ts-types").PlaceDetail, permissions?: string[] | undefined, id?: string | undefined): Promise<PlaceDetailGraphqlDocument>;
        updateDocument<TData_5_4 extends PlaceDetailGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").PlaceDetail> | undefined, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updateDocument<TData_6_4 extends PlaceDetailGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").PlaceDetail> | undefined, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updatePermissions<TData_7_4 extends PlaceDetailGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        updatePermissions<TData_8_4 extends PlaceDetailGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<PlaceDetailGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: PlaceDetailGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<PlaceDetailGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<PlaceDetailGraphqlDocument | null>;
        listDocuments<TData_9_4 extends PlaceDetailGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: PlaceDetailGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: "name" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: "name" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: "name" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: ("name" | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    monumentLike: {
        atg: (...documents: import("appwrite").Models.Document[]) => MonumentLikeGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: MonumentLikeGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").MonumentLike, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<MonumentLikeGraphqlDocument>;
        createDocument(data: import("@app/ts-types").MonumentLike, permissions?: string[] | undefined, id?: string | undefined): Promise<MonumentLikeGraphqlDocument>;
        updateDocument<TData_5_5 extends MonumentLikeGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").MonumentLike> | undefined, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updateDocument<TData_6_5 extends MonumentLikeGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").MonumentLike> | undefined, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updatePermissions<TData_7_5 extends MonumentLikeGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        updatePermissions<TData_8_5 extends MonumentLikeGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<MonumentLikeGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: MonumentLikeGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<MonumentLikeGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<MonumentLikeGraphqlDocument | null>;
        listDocuments<TData_9_5 extends MonumentLikeGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: MonumentLikeGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    experienceLike: {
        atg: (...documents: import("appwrite").Models.Document[]) => ExperienceLikeGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: ExperienceLikeGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").ExperienceLike, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<ExperienceLikeGraphqlDocument>;
        createDocument(data: import("@app/ts-types").ExperienceLike, permissions?: string[] | undefined, id?: string | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updateDocument<TData_5_6 extends ExperienceLikeGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").ExperienceLike> | undefined, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updateDocument<TData_6_6 extends ExperienceLikeGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").ExperienceLike> | undefined, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updatePermissions<TData_7_6 extends ExperienceLikeGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        updatePermissions<TData_8_6 extends ExperienceLikeGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<ExperienceLikeGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: ExperienceLikeGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<ExperienceLikeGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<ExperienceLikeGraphqlDocument | null>;
        listDocuments<TData_9_6 extends ExperienceLikeGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: ExperienceLikeGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    answerTypeText: {
        atg: (...documents: import("appwrite").Models.Document[]) => TextTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: TextTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").TextTypeAnswer, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").TextTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updateDocument<TData_5_7 extends TextTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").TextTypeAnswer> | undefined, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updateDocument<TData_6_7 extends TextTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").TextTypeAnswer> | undefined, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updatePermissions<TData_7_7 extends TextTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        updatePermissions<TData_8_7 extends TextTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<TextTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: TextTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<TextTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<TextTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_9_7 extends TextTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: TextTypeAnswerGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: ("correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    answerTypeNumber: {
        atg: (...documents: import("appwrite").Models.Document[]) => NumberTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: NumberTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").NumberTypeAnswer, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").NumberTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updateDocument<TData_5_8 extends NumberTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").NumberTypeAnswer> | undefined, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updateDocument<TData_6_8 extends NumberTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").NumberTypeAnswer> | undefined, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updatePermissions<TData_7_8 extends NumberTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        updatePermissions<TData_8_8 extends NumberTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<NumberTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: NumberTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<NumberTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<NumberTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_9_8 extends NumberTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: NumberTypeAnswerGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: "correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: ("correctAnswer" | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    answerTypeRadio: {
        atg: (...documents: import("appwrite").Models.Document[]) => RadioTypeAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: RadioTypeAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").RadioTypeAnswer, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").RadioTypeAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updateDocument<TData_5_9 extends RadioTypeAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").RadioTypeAnswer> | undefined, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updateDocument<TData_6_9 extends RadioTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").RadioTypeAnswer> | undefined, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updatePermissions<TData_7_9 extends RadioTypeAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        updatePermissions<TData_8_9 extends RadioTypeAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<RadioTypeAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: RadioTypeAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<RadioTypeAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<RadioTypeAnswerGraphqlDocument | null>;
        listDocuments<TData_9_9 extends RadioTypeAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: RadioTypeAnswerGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    question: {
        atg: (...documents: import("appwrite").Models.Document[]) => QuestionGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: QuestionGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: QuestionDocumentCreate, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<QuestionGraphqlDocument>;
        createDocument(data: QuestionDocumentCreate, permissions?: string[] | undefined, id?: string | undefined): Promise<QuestionGraphqlDocument>;
        updateDocument<TData_5_10 extends QuestionGraphqlDocument>(documentId: string, data: {} | Partial<QuestionDocumentCreate> | undefined, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updateDocument<TData_6_10 extends QuestionGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<QuestionDocumentCreate> | undefined, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updatePermissions<TData_7_10 extends QuestionGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        updatePermissions<TData_8_10 extends QuestionGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<QuestionGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: QuestionGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<QuestionGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<QuestionGraphqlDocument | null>;
        listDocuments<TData_9_10 extends QuestionGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: QuestionGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof QuestionDocumentCreate | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof QuestionDocumentCreate | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof QuestionDocumentCreate | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof QuestionDocumentCreate | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
    usersAnswer: {
        atg: (...documents: import("appwrite").Models.Document[]) => UsersAnswerGraphqlDocument[];
        atgDocumentList: (documentList: import("appwrite").Models.DocumentList<import("appwrite").Models.Document>) => {
            total: number;
            documents: UsersAnswerGraphqlDocument[];
        };
        databaseId: string;
        collectionId: string;
        createDocument(data: import("@app/ts-types").UsersAnswer, permissions?: import("node-appwrite").Models.User<{}>[] | undefined, id?: string | undefined): Promise<UsersAnswerGraphqlDocument>;
        createDocument(data: import("@app/ts-types").UsersAnswer, permissions?: string[] | undefined, id?: string | undefined): Promise<UsersAnswerGraphqlDocument>;
        updateDocument<TData_5_11 extends UsersAnswerGraphqlDocument>(documentId: string, data: {} | Partial<import("@app/ts-types").UsersAnswer> | undefined, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updateDocument<TData_6_11 extends UsersAnswerGraphqlDocument>(document: Types.DocumentSkeleton, data: {} | Partial<import("@app/ts-types").UsersAnswer> | undefined, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updatePermissions<TData_7_11 extends UsersAnswerGraphqlDocument>(documentId: string, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        updatePermissions<TData_8_11 extends UsersAnswerGraphqlDocument>(document: Types.DocumentSkeleton, permissions: string[] | undefined): Promise<UsersAnswerGraphqlDocument>;
        deleteDocument(filters: string[]): Promise<string>;
        deleteDocument(document: UsersAnswerGraphqlDocument): Promise<string>;
        deleteDocument(documentId: string): Promise<string>;
        deleteDocuments(filters?: string[] | undefined): Promise<string[]>;
        getDocument(documentId: string): Promise<UsersAnswerGraphqlDocument | null>;
        getDocument(queries: string[]): Promise<UsersAnswerGraphqlDocument | null>;
        listDocuments<TData_9_11 extends UsersAnswerGraphqlDocument>(filters?: string[] | undefined, offset?: number | undefined, limit?: number | undefined, orderType?: "ASC" | "DESC" | null | undefined): Promise<{
            total: number;
            documents: UsersAnswerGraphqlDocument[];
        }>;
        delete(): Promise<string>;
        listCollections(): Promise<import("node-appwrite").Models.CollectionList>;
        list(): Promise<import("node-appwrite").Models.DatabaseList>;
        create(name: string): Promise<import("node-appwrite").Models.Database>;
        get(): Promise<import("node-appwrite").Models.Database>;
        update(name: string): Promise<import("node-appwrite").Models.Database>;
        createCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        getCollection(collectionId: string): Promise<import("node-appwrite").Models.Collection>;
        updateCollection(collectionId: string, collectionName: string): Promise<import("node-appwrite").Models.Collection>;
        deleteCollection(collectionId: string): Promise<string>;
        listAttributes(collectionId: string): Promise<import("node-appwrite").Models.AttributeList>;
        getAttribute(attributeName: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<any>;
        deleteAttribute(attributeName: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<string>;
        updateRelationship(relationshipAttribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton): Promise<import("node-appwrite").Models.AttributeRelationship>;
        listIndexes(): Promise<import("node-appwrite").Models.IndexList>;
        createIndex(key: string, type: Types.IndexTypes, attributes: (keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").GraphqlDocumentSkeleton)[]): Promise<import("node-appwrite").Models.Index>;
        getIndex(key: string): Promise<import("node-appwrite").Models.Index>;
        deleteIndex(key: string): Promise<string>;
    };
};
export {};
//# sourceMappingURL=collections.d.ts.map