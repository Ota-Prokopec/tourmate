import type { ExperienceDocument, ExperienceLikeDocument, MonumentDocument, MonumentLikeDocument, NumberTypeAnswerDocument, PlaceDetailDocument, QuestionDocument, RadioTypeAnswerDocument, TextTypeAnswerDocument, TokenDocument, UserInfoDocument, UsersAnswerDocument } from '@app/ts-types';
declare const query: {
    userInfo: {
        equal: <TKey extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey, value: UserInfoDocument[TKey] | UserInfoDocument[TKey][]) => string;
        between: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_1]) => string;
        greaterThan: <TKey_2 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_2]) => string;
        greaterThanEqual: <TKey_3 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_3]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_4]) => string;
        lessThanEqual: <TKey_5 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_5]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_6]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7 extends keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UserInfo | keyof import("@app/ts-types").DocumentSkeleton, value: UserInfoDocument[TKey_7]) => string;
    };
    experience: {
        equal: <TKey_8 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_8, value: ExperienceDocument[TKey_8] | ExperienceDocument[TKey_8][]) => string;
        between: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_1_1]) => string;
        greaterThan: <TKey_2_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_2_1]) => string;
        greaterThanEqual: <TKey_3_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_3_1]) => string;
        isNotNull: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_4_1]) => string;
        lessThanEqual: <TKey_5_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_5_1]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_6_1]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: ("userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_1 extends "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | "pictureUrl" | "connectedMonumentId" | keyof import("@app/ts-types").LocationForDocument | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceDocument[TKey_7_1]) => string;
    };
    monument: {
        equal: <TKey_9 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_9, value: MonumentDocument[TKey_9] | MonumentDocument[TKey_9][]) => string;
        between: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_1_2]) => string;
        greaterThan: <TKey_2_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_2_2]) => string;
        greaterThanEqual: <TKey_3_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_3_2]) => string;
        isNotNull: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_4_2]) => string;
        lessThanEqual: <TKey_5_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_5_2]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_6_2]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: ("userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_2 extends "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "userId" | keyof import("@app/ts-types").LocationForDocument | "about" | "name" | "pictureURL" | "placeDetailId" | "topics" | "transports" | "questionId" | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentDocument[TKey_7_2]) => string;
    };
    placeDetail: {
        equal: <TKey_10 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_10, value: PlaceDetailDocument[TKey_10] | PlaceDetailDocument[TKey_10][]) => string;
        between: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_1_3]) => string;
        greaterThan: <TKey_2_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_2_3]) => string;
        greaterThanEqual: <TKey_3_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_3_3]) => string;
        isNotNull: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_4_3]) => string;
        lessThanEqual: <TKey_5_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_5_3]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_6_3]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: ("name" | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_3 extends "name" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "name" | keyof import("@app/ts-types").DocumentSkeleton, value: PlaceDetailDocument[TKey_7_3]) => string;
    };
    token: {
        equal: <TKey_11 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_11, value: TokenDocument[TKey_11] | TokenDocument[TKey_11][]) => string;
        between: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_1_4]) => string;
        greaterThan: <TKey_2_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_2_4]) => string;
        greaterThanEqual: <TKey_3_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_3_4]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_4_4]) => string;
        lessThanEqual: <TKey_5_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_5_4]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_6_4]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_4 extends keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").Token | keyof import("@app/ts-types").DocumentSkeleton, value: TokenDocument[TKey_7_4]) => string;
    };
    monumentLike: {
        equal: <TKey_12 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_12, value: MonumentLikeDocument[TKey_12] | MonumentLikeDocument[TKey_12][]) => string;
        between: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_1_5]) => string;
        greaterThan: <TKey_2_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_2_5]) => string;
        greaterThanEqual: <TKey_3_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_3_5]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_4_5]) => string;
        lessThanEqual: <TKey_5_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_5_5]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_6_5]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_5 extends keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").MonumentLike | keyof import("@app/ts-types").DocumentSkeleton, value: MonumentLikeDocument[TKey_7_5]) => string;
    };
    experienceLike: {
        equal: <TKey_13 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_13, value: ExperienceLikeDocument[TKey_13] | ExperienceLikeDocument[TKey_13][]) => string;
        between: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_1_6]) => string;
        greaterThan: <TKey_2_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_2_6]) => string;
        greaterThanEqual: <TKey_3_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_3_6]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_4_6]) => string;
        lessThanEqual: <TKey_5_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_5_6]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_6_6]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_6 extends keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").ExperienceLike | keyof import("@app/ts-types").DocumentSkeleton, value: ExperienceLikeDocument[TKey_7_6]) => string;
    };
    answerTypeNumber: {
        equal: <TKey_14 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_14, value: NumberTypeAnswerDocument[TKey_14] | NumberTypeAnswerDocument[TKey_14][]) => string;
        between: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_1_7]) => string;
        greaterThan: <TKey_2_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_2_7]) => string;
        greaterThanEqual: <TKey_3_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_3_7]) => string;
        isNotNull: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_4_7]) => string;
        lessThanEqual: <TKey_5_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_5_7]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_6_7]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: ("correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_7 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: NumberTypeAnswerDocument[TKey_7_7]) => string;
    };
    answerTypeText: {
        equal: <TKey_15 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_15, value: TextTypeAnswerDocument[TKey_15] | TextTypeAnswerDocument[TKey_15][]) => string;
        between: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_1_8]) => string;
        greaterThan: <TKey_2_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_2_8]) => string;
        greaterThanEqual: <TKey_3_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_3_8]) => string;
        isNotNull: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_4_8]) => string;
        lessThanEqual: <TKey_5_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_5_8]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_6_8]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: ("correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_8 extends "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton>(attribute: "correctAnswer" | keyof import("@app/ts-types").DocumentSkeleton, value: TextTypeAnswerDocument[TKey_7_8]) => string;
    };
    answerTypeRadio: {
        equal: <TKey_16 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_16, value: RadioTypeAnswerDocument[TKey_16] | RadioTypeAnswerDocument[TKey_16][]) => string;
        between: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_1_9]) => string;
        greaterThan: <TKey_2_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_2_9]) => string;
        greaterThanEqual: <TKey_3_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_3_9]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_4_9]) => string;
        lessThanEqual: <TKey_5_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_5_9]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_6_9]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_9 extends keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").RadioTypeAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: RadioTypeAnswerDocument[TKey_7_9]) => string;
    };
    question: {
        equal: <TKey_17 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_17, value: QuestionDocument[TKey_17] | QuestionDocument[TKey_17][]) => string;
        between: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_1_10]) => string;
        greaterThan: <TKey_2_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_2_10]) => string;
        greaterThanEqual: <TKey_3_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_3_10]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_4_10]) => string;
        lessThanEqual: <TKey_5_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_5_10]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_6_10]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_10 extends keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").QuestionDocumentCreate | keyof import("@app/ts-types").DocumentSkeleton, value: QuestionDocument[TKey_7_10]) => string;
    };
    usersAnswer: {
        equal: <TKey_18 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: TKey_18, value: UsersAnswerDocument[TKey_18] | UsersAnswerDocument[TKey_18][]) => string;
        between: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, start: number, end: number) => string;
        cursorAfter: (documentId: string) => string;
        cursorBefore: (documentId: string) => string;
        endsWith: <TKey_1_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_1_11]) => string;
        greaterThan: <TKey_2_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_2_11]) => string;
        greaterThanEqual: <TKey_3_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_3_11]) => string;
        isNotNull: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        isNull: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        lessThan: <TKey_4_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_4_11]) => string;
        lessThanEqual: <TKey_5_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_5_11]) => string;
        limit: (limit: number) => string;
        notEqual: <TKey_6_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_6_11]) => string;
        offset: (offset: number) => string;
        orderAsc: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        orderDesc: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton) => string;
        search: (attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: string) => string;
        select: (attributes: (keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton)[]) => string;
        startsWith: <TKey_7_11 extends keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton>(attribute: keyof import("@app/ts-types").UsersAnswer | keyof import("@app/ts-types").DocumentSkeleton, value: UsersAnswerDocument[TKey_7_11]) => string;
    };
};
export type QueryType = (typeof query)[keyof typeof query];
export default query;
//# sourceMappingURL=query.d.ts.map