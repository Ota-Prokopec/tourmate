### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _documentId: String!
  _permissions: [String!]!
  _updatedAt: String!
  emailVerification: Boolean!
  myId: String!
  phoneVerification: Boolean!
  prefs: UsersPreferences!

  """This is URL of profile picture. Not its id."""
  profilePictureURL: String!
  secondsFromUserCreatedToNow: Float!
  status: Boolean!
  userId: String!
  username: String!
}

scalar AnswerType

scalar ColorTheme

input CreateAccountInput {
  myId: String!
  username: String!
}

input CreateExperienceInput {
  connnectedMonumentId: String!
  location: Location!
  picture: String
}

input CreateMonumentInput {
  about: String!
  location: Location!
  name: String!
  picture: String!
  placeName: String!
  question: QuestionInput
  topics: [Topic!]!
  transports: [Transport!]!
}

input CreateTourInput {
  monumentIds: [String!]!
  tourName: String!
}

type EmailLogin {
  session: String!
}

type Experience {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  connectedMonument: Monument
  connectedMonumentId: String!
  liked: ExperienceLike
  likes: [ExperienceLike!]!
  location: Location!
  pictureUrl: String
  totalLikesCount: Int!
  user: User!
  userId: String!
}

type ExperienceLike {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  experienceId: String!
  user: User!
  userId: String!
}

scalar Language

scalar Location

input LocationInput {
  location: Location!
  rangeMeters: Float = 700
}

type Monument {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  about: String
  connectedExperiences: [Experience!]!
  liked: MonumentLike
  likes: [MonumentLike!]!
  location: Location!
  name: String!
  nearExperiences: [Experience!]!

  """This it an URL not id of picture"""
  pictureURL: String!
  placeDetail: PlaceDetail!
  placeDetailId: String!
  question: Question
  questionId: String
  topics: [Topic!]!
  totalLikesCount: Int!
  transports: [Transport!]!
  user: User!
  userId: String!
  usersAnswerToQuestion: UsersAnswerToQuestion
  usersConnectedExperiences: [Experience!]!
}

input MonumentInputByName {
  limit: Int!
  name: String!
}

type MonumentLike {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  monument: Monument!
  monumentId: String!
  user: User!
  userId: String!
}

type Mutation {
  answerQuestion(answer: StringOrNumber!, monumentId: String!): UsersAnswerToQuestion!
  createExperience(input: CreateExperienceInput!): Experience!
  createMonument(input: CreateMonumentInput!): Monument!
  createTour(input: CreateTourInput!): Tour!
  deleteExperience(experienceId: String!): Boolean!
  deleteMonument(monumentId: String!): Boolean!
  likeExperience(experienceId: String!): ExperienceLike!
  likeMonument(monumentId: String!): MonumentLike!
}

type PlaceDetail {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  name: String!
}

type Query {
  createAccount(language: Language!, myId: String!, username: String!): Account!
  getAccount: Account!
  getExperience(id: String!): Experience!
  getListOfExperiences(limit: Int, location: LocationInput, offset: Int, userId: String): [Experience!]!
  getListOfMonumentLikeDocuments(limit: Int = 50, offset: Int, userId: String): [MonumentLike!]!
  getListOfMonuments(limit: Int = 50, location: LocationInput, name: String, offset: Int, topics: [Topic!], transports: [Transport!], userId: String): [Monument!]!
  getListOfTours(limit: Int, offset: Int, userId: String): [Tour!]!
  getListOfUsers(limit: Int = 50, offset: Int, searchingText: String): [User!]!
  getMonument(id: String!): Monument!
  getTour(tourId: String!): Tour!
  getUser(myId: String, userId: String): User!
  logInViaEmail(email: String!, password: String!): EmailLogin!
  logout: Boolean!
  setSession(session: String!): Boolean!
  updateProfilePicture(picture: String!): Account!
}

type Question {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  correctAnswer: StringOrNumber
  pickingAnswers: [String!]
  question: String!
  type: AnswerType!
}

input QuestionInput {
  correctAnswer: StringOrNumber!
  pickingAnswers: [String!]
  question: String!
  type: AnswerType!
}

scalar StringOrNumber

scalar Topic

type Tour {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  creator: User!
  monumentIds: [String!]!
  monuments: [Monument!]!
  tourName: String!
  userId: String!
}

scalar Transport

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User {
  _collectionId: String!
  _createdAt: String!
  _databaseId: String!
  _id: String!
  _permissions: [String!]!
  _updatedAt: String!
  experiences: [Experience!]!
  monuments: [Monument!]!
  myId: String!

  """This is URL of profile picture. Not its id."""
  profilePictureURL: String!
  userId: String!
  username: String!
}

type UsersAnswerToQuestion {
  answeredCorrectly: Boolean!
}

type UsersPreferences {
  colorTheme: ColorTheme!
  language: Language!
  mapRange: Int!
  termsAccepted: Boolean!
}